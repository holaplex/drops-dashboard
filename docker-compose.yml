version: '3.8'

x-backend-base: &backend-base
  container_name: backend_${PROJECT_NAME}_${ENVIRONMENT}
  working_dir: /backend
  volumes:
    - ${PWD}/backend:/backend
    - bundler_gems:/usr/local/bundle/
  depends_on:
    - db
  environment:
    RAILS_ENV: ${ENVIRONMENT}
    NODE_ENV: ${ENVIRONMENT}
    DBHOST: db
    DBUSER: ${POSTGRES_USER}
    DBPASS: ${POSTGRES_PASSWORD}
    APM_HOST: elastic-agent
    PROJECT_NAME: ${PROJECT_NAME}


x-frontend-base: &frontend-base
  container_name: frontend_${PROJECT_NAME}_${ENVIRONMENT}

services:
  backend-dev:
    <<: *backend-base
    build: backend
    command: ['/bin/bash', './development.sh']
    ports:
      - 3000:3000
    profiles: ['dev']
    stdin_open: true
    tty: true
    networks:
      - observability

  backend-prod:
    <<: *backend-base
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        ENVIRONMENT: ${ENVIRONMENT}
    profiles: ['prod']
    networks:
      - observability

  frontend-dev:
    <<: *frontend-base
    build:
      context: ./frontend
      dockerfile: Dockerfile
    working_dir: /frontend
    volumes:
      - ${PWD}/frontend:/frontend
      - frontend_node_modules:/frontend/node_modules/ 
    ports:
      - 3001:3001
    command: yarn vite
    depends_on:
      - backend-dev
    profiles: ['dev']

  frontend-prod:
    <<: *frontend-base
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    networks:
      - observability
    profiles: ['prod']


  redis:
    image: 'redis:5-alpine'
    command: redis-server
    ports:
      - '6379:6379'
    volumes:
      - 'redis:/data'

  sidekiq:
    depends_on:
      - 'db'
      - 'redis'
    build: ./backend
    command: bundle exec sidekiq
    volumes:
      - '.:/backend'
      - '/backend/tmp' # don't mount tmp directory
    environment:
      - REDIS_URL_SIDEKIQ=redis://redis:6379/1
  

  db:
    image: postgres:13
    restart: 'no'
    container_name: postgresql_${PROJECT_NAME}_${ENVIRONMENT}
    volumes:
      - postgresdb:/var/lib/postgresql/data/
    profiles: ['dev', 'prod']
    environment:
      POSTGRES_DB: ${PROJECT_NAME}_${ENVIRONMENT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - observability

volumes:
  redis:
  postgresdb:
  bundler_gems:
  frontend_node_modules:
  production_html:
    external: true

networks:
 observability:
  external: true

